# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Branch {
  name: ID!
  hash: String!
  latestCommitter: String!
  latestCommitterEmail: String!
  latestCommitMessage: String!
  latestCommitDate: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Column {
  name: String!
  isPrimaryKey: Boolean!
  type: String!
}

type Commit {
  commitHash: String!
  committer: String!
  committerEmail: String!
  date: Timestamp!
  message: String!
}

type DiffSummary {
  fromTableName: String!
  toTableName: String!
  tableName: String!
  tableType: TableDiffType!
  hasDataChanges: Boolean!
  hasSchemaChanges: Boolean!
}

enum TableDiffType {
  Added
  Dropped
  Modified
  Renamed
}

type Pull {
  pullId: Int!
  title: String!
  description: String!
  creatorName: String!
  fromBranchName: String!
  toBranchName: String!
  createdAt: Timestamp!
  state: PullState!
  premergeFromCommit: String!
  premergeToCommit: String!
  mergeBaseCommit: String!
  commits: [Commit!]
}

enum PullState {
  Open
  Closed
  Merged
  Unspecified
}

type ColumnValue {
  displayValue: String!
}

type Row {
  columnValues: [ColumnValue!]!
}

type RowListWithCols {
  list: [Row!]!
  columns: [Column!]!
}

type RowDiff {
  added: Row
  deleted: Row
}

type RowDiffList {
  list: [RowDiff!]!
  columns: [Column!]!
}

type Query {
  branches: [Branch!]!
  branch(name: String!): Branch
  columns(tableName: String!, refName: String!): [Column!]!
  twoDotLogs(fromBranchName: String!, toBranchName: String!): [Commit!]!
  diffSummaries(fromRefName: String!, toRefName: String!): [DiffSummary!]!
  tableDiffSummary(fromRefName: String!, toRefName: String!, tableName: String!): DiffSummary
  pull(pullId: Int!): Pull
  pulls: [Pull!]!
  rowDiffs(fromRefName: String, toRefName: String, tableName: String!): RowDiffList!
  rowsForDiff(refName: String!, tableName: String!): RowListWithCols!
}

type Mutation {
  deleteBranch(name: String!): Boolean!
  createBranch(newBranchName: String!, fromRefName: String!): Boolean!
  createPull(title: String!, description: String!, fromBranchName: String!, toBranchName: String!, creatorName: String!): Pull!
}